{"ast":null,"code":"var _jsxFileName = \"/Users/stellawu/Desktop/3130release3_main/group02/group02release2/trello-frontend/src/Components/Login.js\",\n  _s = $RefreshSig$();\n/*\nimport * as Yup from \"yup\";\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { Stack, TextField } from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { authenticateUser } from \"../store/slices/user/UserThunk\";\nimport { toast } from \"react-toastify\";\nimport storage from \"../lib/localStorage\";\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport axios from 'axios';\n\n\nexport default function Login(onLogin) {\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string()\n      .email(\"Email must be a valid email address\")\n      .required(\"Email is required\"),\n    password: Yup.string().required(\"Password is required\"),\n  });\n\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n \n  const formik = useFormik({\n    initialValues: {\n      email: null,\n      password: null,\n    },\n    validationSchema: LoginSchema,\n    onSubmit: async (values, {setSubmitting}) => {\n      const { email, password } = values;\n      onLogin(values,setSubmitting);\n      //console.log(email, password);\n      \n  /*    dispatch(\n        authenticateUser({\n          email,\n          password,\n        })\n      )\n        .then((response) => {\n          const { payload } = response;\n  \n          if (!payload || !payload[\"data\"]) {\n            toast.error(\"Something went wrong! Try again later\");\n            return;\n          }\n\n          const data = payload[\"data\"]\n          if (payload[\"status\"] !== \"SUCCESS\") {\n            toast.error(data[\"message\"]);\n            return;\n          }\n  \n          \n          storage.put(\"token\", data[\"token\"]);\n          navigate(\"/home\");\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n        \n    },\n     \n  });\n\n\n  async function handleSubmit(values, setSubmitting) {\n    const { email, password } = values;\n\n    try {\n      const response = await fetch('http://localhost:9012/user/login', {\n        method: 'POST',\n        body: JSON.stringify({ email, password }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        dispatch(authenticateUser({ email, password }));\n        \n\n        navigate(\"/board\")\n      } else {\n        // if login failed\n        console.log('Login failed');\n        \n      }\n    } catch (error) {\n      console.log('Error:', error);\n    }\n    finally {\n       setSubmitting(false);\n    }\n  }\n\n\n\n  const { errors, touched, isSubmitting, handlesubmit, getFieldProps } = formik;\n\n  return (\n    <Stack spacing={5}>\n      <Box>\n            <Typography\n              variant=\"h3\"\n              sx={{\n                textAlign: \"center\",\n              }}\n            >\n              Trello Clone\n            </Typography>\n            <Typography\n              variant=\"h4\"\n              sx={{\n                textAlign: \"center\",\n              }}\n            >\n              Login Here\n            </Typography>\n          </Box>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handlesubmit}\n        onLogin={handleSubmit}>   \n          <Stack spacing={3}>\n            <TextField\n              fullWidth\n              autoComplete=\"username\"\n              type=\"email\"\n              label=\"Email address\"\n              {...getFieldProps(\"email\")}\n              error={Boolean(touched.email && errors.email)}\n              helperText={touched.email && errors.email}\n            />\n\n            <TextField\n              fullWidth\n              type=\"password\"\n              label=\"Password\"\n              {...getFieldProps(\"password\")}\n              error={Boolean(touched.password && errors.password)}\n              helperText={touched.password && errors.password}\n            />\n\n            <LoadingButton\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n              loading={isSubmitting}\n            >\n              Login\n            </LoadingButton>\n          </Stack>\n        </Form>\n      </FormikProvider>\n    </Stack>\n  );\n}\n*/\n\nimport React from 'react';\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { LoadingButton } from '@mui/lab';\nimport { Stack, TextField } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login(_ref) {\n  _s();\n  let {\n    onLogin\n  } = _ref;\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().email(\"Email must be a valid email address\").required(\"Email is required\"),\n    password: Yup.string().required(\"Password is required\")\n  });\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: LoginSchema,\n    onSubmit: (values, _ref2) => {\n      let {\n        setSubmitting\n      } = _ref2;\n      onLogin(values, setSubmitting);\n    }\n  });\n  const {\n    errors,\n    touched,\n    isSubmitting,\n    handleSubmit,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handlesubmit,\n      onLogin: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"username\",\n          type: \"email\",\n          label: \"Email address\",\n          ...getFieldProps(\"email\"),\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          type: \"password\",\n          label: \"Password\",\n          ...getFieldProps(\"password\"),\n          error: Boolean(touched.password && errors.password),\n          helperText: touched.password && errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","Form","FormikProvider","useFormik","Yup","LoadingButton","Stack","TextField","jsxDEV","_jsxDEV","Login","_ref","_s","onLogin","LoginSchema","object","shape","email","string","required","password","formik","initialValues","validationSchema","onSubmit","values","_ref2","setSubmitting","errors","touched","isSubmitting","handleSubmit","getFieldProps","value","children","autoComplete","noValidate","handlesubmit","spacing","fullWidth","type","label","error","Boolean","helperText","fileName","_jsxFileName","lineNumber","columnNumber","size","variant","loading","_c","$RefreshReg$"],"sources":["/Users/stellawu/Desktop/3130release3_main/group02/group02release2/trello-frontend/src/Components/Login.js"],"sourcesContent":["/*\nimport * as Yup from \"yup\";\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { Stack, TextField } from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { authenticateUser } from \"../store/slices/user/UserThunk\";\nimport { toast } from \"react-toastify\";\nimport storage from \"../lib/localStorage\";\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport axios from 'axios';\n\n\nexport default function Login(onLogin) {\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string()\n      .email(\"Email must be a valid email address\")\n      .required(\"Email is required\"),\n    password: Yup.string().required(\"Password is required\"),\n  });\n\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n \n  const formik = useFormik({\n    initialValues: {\n      email: null,\n      password: null,\n    },\n    validationSchema: LoginSchema,\n    onSubmit: async (values, {setSubmitting}) => {\n      const { email, password } = values;\n      onLogin(values,setSubmitting);\n      //console.log(email, password);\n      \n  /*    dispatch(\n        authenticateUser({\n          email,\n          password,\n        })\n      )\n        .then((response) => {\n          const { payload } = response;\n  \n          if (!payload || !payload[\"data\"]) {\n            toast.error(\"Something went wrong! Try again later\");\n            return;\n          }\n\n          const data = payload[\"data\"]\n          if (payload[\"status\"] !== \"SUCCESS\") {\n            toast.error(data[\"message\"]);\n            return;\n          }\n  \n          \n          storage.put(\"token\", data[\"token\"]);\n          navigate(\"/home\");\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n        \n    },\n     \n  });\n\n\n  async function handleSubmit(values, setSubmitting) {\n    const { email, password } = values;\n\n    try {\n      const response = await fetch('http://localhost:9012/user/login', {\n        method: 'POST',\n        body: JSON.stringify({ email, password }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        dispatch(authenticateUser({ email, password }));\n        \n\n        navigate(\"/board\")\n      } else {\n        // if login failed\n        console.log('Login failed');\n        \n      }\n    } catch (error) {\n      console.log('Error:', error);\n    }\n    finally {\n       setSubmitting(false);\n    }\n  }\n\n\n\n  const { errors, touched, isSubmitting, handlesubmit, getFieldProps } = formik;\n\n  return (\n    <Stack spacing={5}>\n      <Box>\n            <Typography\n              variant=\"h3\"\n              sx={{\n                textAlign: \"center\",\n              }}\n            >\n              Trello Clone\n            </Typography>\n            <Typography\n              variant=\"h4\"\n              sx={{\n                textAlign: \"center\",\n              }}\n            >\n              Login Here\n            </Typography>\n          </Box>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handlesubmit}\n        onLogin={handleSubmit}>   \n          <Stack spacing={3}>\n            <TextField\n              fullWidth\n              autoComplete=\"username\"\n              type=\"email\"\n              label=\"Email address\"\n              {...getFieldProps(\"email\")}\n              error={Boolean(touched.email && errors.email)}\n              helperText={touched.email && errors.email}\n            />\n\n            <TextField\n              fullWidth\n              type=\"password\"\n              label=\"Password\"\n              {...getFieldProps(\"password\")}\n              error={Boolean(touched.password && errors.password)}\n              helperText={touched.password && errors.password}\n            />\n\n            <LoadingButton\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n              loading={isSubmitting}\n            >\n              Login\n            </LoadingButton>\n          </Stack>\n        </Form>\n      </FormikProvider>\n    </Stack>\n  );\n}\n*/\n\nimport React from 'react';\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { LoadingButton } from '@mui/lab';\nimport { Stack, TextField } from \"@mui/material\";\n\nfunction Login({ onLogin }) {\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string()\n      .email(\"Email must be a valid email address\")\n      .required(\"Email is required\"),\n    password: Yup.string().required(\"Password is required\"),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: LoginSchema,\n    onSubmit: (values, { setSubmitting }) => {\n      onLogin(values, setSubmitting);\n    }\n  });\n\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n    <Form autoComplete=\"off\" noValidate onSubmit={handlesubmit}\n    onLogin={handleSubmit}>   \n      <Stack spacing={3}>\n        <TextField\n          fullWidth\n          autoComplete=\"username\"\n          type=\"email\"\n          label=\"Email address\"\n          {...getFieldProps(\"email\")}\n          error={Boolean(touched.email && errors.email)}\n          helperText={touched.email && errors.email}\n        />\n\n        <TextField\n          fullWidth\n          type=\"password\"\n          label=\"Password\"\n          {...getFieldProps(\"password\")}\n          error={Boolean(touched.password && errors.password)}\n          helperText={touched.password && errors.password}\n        />\n\n        <LoadingButton\n          fullWidth\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n          loading={isSubmitting}\n        >\n          Login\n        </LoadingButton>\n      </Stack>\n    </Form>\n  </FormikProvider>\n  );\n}\n\nexport default Login;\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}