{"ast":null,"code":"/* Lab code\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { authenticateUser, fetchAuthenticatedUser } from \"./UserThunk\";\n\n\nconst initialState = {\n  details: {\n    data: {},\n    isFetching: false,\n  },\n  authenticate: {\n    data: null,\n    isFetching: false,\n  },\n};\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    setUser: (state, action) => {\n      state.details.data = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(authenticateUser.fulfilled, (state, action) => {\n      if (\n        !action.payload ||\n        !action.payload[\"data\"] ||\n        !action.payload[\"data\"][\"token\"]\n      ) {\n        return;\n      }\n\n      state.authenticate.data = action.payload[\"data\"][\"token\"];\n      state.authenticate.isFetching = false;\n    });\n\n    builder.addCase(authenticateUser.pending, (state) => {\n      state.authenticate.isFetching = true;\n    });\n  },\n});\n\n\nexport const { setUser } = userSlice.actions;\n\nexport default userSlice.reducer;\n*/\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  authenticate: null\n}; // 将 data 改为 authenticate\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    setUser: (state, action) => {\n      state.authenticate = action.payload;\n    }\n  }\n});\nexport const {\n  setUser\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","authenticate","userSlice","name","reducers","setUser","state","action","payload","actions","reducer"],"sources":["/Users/stellawu/Desktop/3130release3_main/group02/group02release2/trello-frontend/src/store/slices/user/UserSlice.js"],"sourcesContent":["/* Lab code\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { authenticateUser, fetchAuthenticatedUser } from \"./UserThunk\";\n\n\nconst initialState = {\n  details: {\n    data: {},\n    isFetching: false,\n  },\n  authenticate: {\n    data: null,\n    isFetching: false,\n  },\n};\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    setUser: (state, action) => {\n      state.details.data = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(authenticateUser.fulfilled, (state, action) => {\n      if (\n        !action.payload ||\n        !action.payload[\"data\"] ||\n        !action.payload[\"data\"][\"token\"]\n      ) {\n        return;\n      }\n\n      state.authenticate.data = action.payload[\"data\"][\"token\"];\n      state.authenticate.isFetching = false;\n    });\n\n    builder.addCase(authenticateUser.pending, (state) => {\n      state.authenticate.isFetching = true;\n    });\n  },\n});\n\n\nexport const { setUser } = userSlice.actions;\n\nexport default userSlice.reducer;\n*/\n\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = { authenticate: null }; // 将 data 改为 authenticate\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    setUser: (state, action) => {\n      state.authenticate = action.payload;\n    },\n  },\n});\n\nexport const { setUser } = userSlice.actions;\n\nexport default userSlice.reducer;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EAAEC,YAAY,EAAE;AAAK,CAAC,CAAC,CAAC;;AAE7C,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC5BI,IAAI,EAAE,MAAM;EACZH,YAAY;EACZI,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1BD,KAAK,CAACL,YAAY,GAAGM,MAAM,CAACC,OAAO;IACrC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH;AAAQ,CAAC,GAAGH,SAAS,CAACO,OAAO;AAE5C,eAAeP,SAAS,CAACQ,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}