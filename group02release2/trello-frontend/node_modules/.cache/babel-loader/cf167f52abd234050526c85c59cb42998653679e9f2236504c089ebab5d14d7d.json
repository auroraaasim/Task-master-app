{"ast":null,"code":"var _jsxFileName = \"/Users/stellawu/Desktop/3130release3_main/group02/group02release2/trello-frontend/src/Components/Login.js\",\n  _s = $RefreshSig$();\n/*\nimport * as Yup from \"yup\";\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { Stack, TextField } from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { authenticateUser } from \"../store/slices/user/UserThunk\";\nimport { toast } from \"react-toastify\";\nimport storage from \"../lib/localStorage\";\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport axios from 'axios';\n\n\nexport default function Login(onLogin) {\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string()\n      .email(\"Email must be a valid email address\")\n      .required(\"Email is required\"),\n    password: Yup.string().required(\"Password is required\"),\n  });\n\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n \n  const formik = useFormik({\n    initialValues: {\n      email: null,\n      password: null,\n    },\n    validationSchema: LoginSchema,\n    onSubmit: async (values, {setSubmitting}) => {\n      const { email, password } = values;\n      onLogin(values,setSubmitting);\n      //console.log(email, password);\n      \n  /*    dispatch(\n        authenticateUser({\n          email,\n          password,\n        })\n      )\n        .then((response) => {\n          const { payload } = response;\n  \n          if (!payload || !payload[\"data\"]) {\n            toast.error(\"Something went wrong! Try again later\");\n            return;\n          }\n\n          const data = payload[\"data\"]\n          if (payload[\"status\"] !== \"SUCCESS\") {\n            toast.error(data[\"message\"]);\n            return;\n          }\n  \n          \n          storage.put(\"token\", data[\"token\"]);\n          navigate(\"/home\");\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n        \n    },\n     \n  });\n\n\n  async function handleSubmit(values, setSubmitting) {\n    const { email, password } = values;\n\n    try {\n      const response = await fetch('http://localhost:9012/user/login', {\n        method: 'POST',\n        body: JSON.stringify({ email, password }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        dispatch(authenticateUser({ email, password }));\n        \n\n        navigate(\"/board\")\n      } else {\n        // if login failed\n        console.log('Login failed');\n        \n      }\n    } catch (error) {\n      console.log('Error:', error);\n    }\n    finally {\n       setSubmitting(false);\n    }\n  }\n\n\n\n  const { errors, touched, isSubmitting, handlesubmit, getFieldProps } = formik;\n\n  return (\n    <Stack spacing={5}>\n      <Box>\n            <Typography\n              variant=\"h3\"\n              sx={{\n                textAlign: \"center\",\n              }}\n            >\n              Trello Clone\n            </Typography>\n            <Typography\n              variant=\"h4\"\n              sx={{\n                textAlign: \"center\",\n              }}\n            >\n              Login Here\n            </Typography>\n          </Box>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handlesubmit}\n        onLogin={handleSubmit}>   \n          <Stack spacing={3}>\n            <TextField\n              fullWidth\n              autoComplete=\"username\"\n              type=\"email\"\n              label=\"Email address\"\n              {...getFieldProps(\"email\")}\n              error={Boolean(touched.email && errors.email)}\n              helperText={touched.email && errors.email}\n            />\n\n            <TextField\n              fullWidth\n              type=\"password\"\n              label=\"Password\"\n              {...getFieldProps(\"password\")}\n              error={Boolean(touched.password && errors.password)}\n              helperText={touched.password && errors.password}\n            />\n\n            <LoadingButton\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n              loading={isSubmitting}\n            >\n              Login\n            </LoadingButton>\n          </Stack>\n        </Form>\n      </FormikProvider>\n    </Stack>\n  );\n}\n*/\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport React from 'react';\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { LoadingButton } from '@mui/lab';\nimport { Stack, TextField } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login(_ref) {\n  _s();\n  let {\n    onLogin\n  } = _ref;\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().email(\"Email must be a valid email address\").required(\"Email is required\"),\n    password: Yup.string().required(\"Password is required\")\n  });\n  const formik = useFormik({\n    initialValues: {\n      email: null,\n      password: null\n    },\n    validationSchema: LoginSchema,\n    onSubmit: async (values, _ref2) => {\n      let {\n        setSubmitting\n      } = _ref2;\n      const {\n        email,\n        password\n      } = values;\n      onLogin(values, setSubmitting);\n    }\n  });\n  const {\n    errors,\n    touched,\n    isSubmitting,\n    handleSubmit,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    spacing: 5,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        sx: {\n          textAlign: \"center\"\n        },\n        children: \"Trello Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        sx: {\n          textAlign: \"center\"\n        },\n        children: \"Login Here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(FormikProvider, {\n      value: formik,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        autoComplete: \"off\",\n        noValidate: true,\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"username\",\n            type: \"email\",\n            label: \"Email address\",\n            ...getFieldProps(\"email\"),\n            error: Boolean(touched.email && errors.email),\n            helperText: touched.email && errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            type: \"password\",\n            label: \"Password\",\n            ...getFieldProps(\"password\"),\n            error: Boolean(touched.password && errors.password),\n            helperText: touched.password && errors.password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n            fullWidth: true,\n            size: \"large\",\n            type: \"submit\",\n            variant: \"contained\",\n            loading: isSubmitting,\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["Box","Typography","React","Form","FormikProvider","useFormik","Yup","LoadingButton","Stack","TextField","jsxDEV","_jsxDEV","Login","_ref","_s","onLogin","LoginSchema","object","shape","email","string","required","password","formik","initialValues","validationSchema","onSubmit","values","_ref2","setSubmitting","errors","touched","isSubmitting","handleSubmit","getFieldProps","spacing","children","variant","sx","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","value","autoComplete","noValidate","fullWidth","type","label","error","Boolean","helperText","size","loading","_c","$RefreshReg$"],"sources":["/Users/stellawu/Desktop/3130release3_main/group02/group02release2/trello-frontend/src/Components/Login.js"],"sourcesContent":["/*\nimport * as Yup from \"yup\";\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { Stack, TextField } from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { authenticateUser } from \"../store/slices/user/UserThunk\";\nimport { toast } from \"react-toastify\";\nimport storage from \"../lib/localStorage\";\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport axios from 'axios';\n\n\nexport default function Login(onLogin) {\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string()\n      .email(\"Email must be a valid email address\")\n      .required(\"Email is required\"),\n    password: Yup.string().required(\"Password is required\"),\n  });\n\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n \n  const formik = useFormik({\n    initialValues: {\n      email: null,\n      password: null,\n    },\n    validationSchema: LoginSchema,\n    onSubmit: async (values, {setSubmitting}) => {\n      const { email, password } = values;\n      onLogin(values,setSubmitting);\n      //console.log(email, password);\n      \n  /*    dispatch(\n        authenticateUser({\n          email,\n          password,\n        })\n      )\n        .then((response) => {\n          const { payload } = response;\n  \n          if (!payload || !payload[\"data\"]) {\n            toast.error(\"Something went wrong! Try again later\");\n            return;\n          }\n\n          const data = payload[\"data\"]\n          if (payload[\"status\"] !== \"SUCCESS\") {\n            toast.error(data[\"message\"]);\n            return;\n          }\n  \n          \n          storage.put(\"token\", data[\"token\"]);\n          navigate(\"/home\");\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n        \n    },\n     \n  });\n\n\n  async function handleSubmit(values, setSubmitting) {\n    const { email, password } = values;\n\n    try {\n      const response = await fetch('http://localhost:9012/user/login', {\n        method: 'POST',\n        body: JSON.stringify({ email, password }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        dispatch(authenticateUser({ email, password }));\n        \n\n        navigate(\"/board\")\n      } else {\n        // if login failed\n        console.log('Login failed');\n        \n      }\n    } catch (error) {\n      console.log('Error:', error);\n    }\n    finally {\n       setSubmitting(false);\n    }\n  }\n\n\n\n  const { errors, touched, isSubmitting, handlesubmit, getFieldProps } = formik;\n\n  return (\n    <Stack spacing={5}>\n      <Box>\n            <Typography\n              variant=\"h3\"\n              sx={{\n                textAlign: \"center\",\n              }}\n            >\n              Trello Clone\n            </Typography>\n            <Typography\n              variant=\"h4\"\n              sx={{\n                textAlign: \"center\",\n              }}\n            >\n              Login Here\n            </Typography>\n          </Box>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handlesubmit}\n        onLogin={handleSubmit}>   \n          <Stack spacing={3}>\n            <TextField\n              fullWidth\n              autoComplete=\"username\"\n              type=\"email\"\n              label=\"Email address\"\n              {...getFieldProps(\"email\")}\n              error={Boolean(touched.email && errors.email)}\n              helperText={touched.email && errors.email}\n            />\n\n            <TextField\n              fullWidth\n              type=\"password\"\n              label=\"Password\"\n              {...getFieldProps(\"password\")}\n              error={Boolean(touched.password && errors.password)}\n              helperText={touched.password && errors.password}\n            />\n\n            <LoadingButton\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n              loading={isSubmitting}\n            >\n              Login\n            </LoadingButton>\n          </Stack>\n        </Form>\n      </FormikProvider>\n    </Stack>\n  );\n}\n*/\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport React from 'react';\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { LoadingButton } from '@mui/lab';\nimport { Stack, TextField } from \"@mui/material\";\n\nfunction Login({ onLogin }) {\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string()\n      .email(\"Email must be a valid email address\")\n      .required(\"Email is required\"),\n    password: Yup.string().required(\"Password is required\"),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: null,\n      password: null,\n    },\n    validationSchema: LoginSchema,\n    onSubmit: async (values, {setSubmitting}) => {\n      const { email, password } = values;\n      onLogin(values,setSubmitting);\n    }\n  });\n\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <Stack spacing={5}>\n    <Box>\n          <Typography\n            variant=\"h3\"\n            sx={{\n              textAlign: \"center\",\n            }}\n          >\n            Trello Clone\n          </Typography>\n          <Typography\n            variant=\"h4\"\n            sx={{\n              textAlign: \"center\",\n            }}\n          >\n            Login Here\n          </Typography>\n        </Box>\n    <FormikProvider value={formik}>\n    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>   \n      <Stack spacing={3}>\n        <TextField\n          fullWidth\n          autoComplete=\"username\"\n          type=\"email\"\n          label=\"Email address\"\n          {...getFieldProps(\"email\")}\n          error={Boolean(touched.email && errors.email)}\n          helperText={touched.email && errors.email}\n        />\n\n        <TextField\n          fullWidth\n          type=\"password\"\n          label=\"Password\"\n          {...getFieldProps(\"password\")}\n          error={Boolean(touched.password && errors.password)}\n          helperText={touched.password && errors.password}\n        />\n\n        <LoadingButton\n          fullWidth\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n          loading={isSubmitting}\n        >\n          Login\n        </LoadingButton>\n      </Stack>\n    </Form>\n  </FormikProvider>\n  </Stack>\n  );\n}\n\nexport default Login;\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}