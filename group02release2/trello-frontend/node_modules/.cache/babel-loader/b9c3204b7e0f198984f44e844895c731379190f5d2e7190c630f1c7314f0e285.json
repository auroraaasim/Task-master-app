{"ast":null,"code":"/*\nimport * as Yup from \"yup\";\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { Stack, TextField } from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { authenticateUser } from \"../store/slices/user/UserThunk\";\nimport { toast } from \"react-toastify\";\nimport storage from \"../lib/localStorage\";\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport axios from 'axios';\n\n\nexport default function Login(onLogin) {\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string()\n      .email(\"Email must be a valid email address\")\n      .required(\"Email is required\"),\n    password: Yup.string().required(\"Password is required\"),\n  });\n\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n \n  const formik = useFormik({\n    initialValues: {\n      email: null,\n      password: null,\n    },\n    validationSchema: LoginSchema,\n    onSubmit: async (values, {setSubmitting}) => {\n      const { email, password } = values;\n      onLogin(values,setSubmitting);\n      //console.log(email, password);\n      \n  /*    dispatch(\n        authenticateUser({\n          email,\n          password,\n        })\n      )\n        .then((response) => {\n          const { payload } = response;\n  \n          if (!payload || !payload[\"data\"]) {\n            toast.error(\"Something went wrong! Try again later\");\n            return;\n          }\n\n          const data = payload[\"data\"]\n          if (payload[\"status\"] !== \"SUCCESS\") {\n            toast.error(data[\"message\"]);\n            return;\n          }\n  \n          \n          storage.put(\"token\", data[\"token\"]);\n          navigate(\"/home\");\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n        \n    },\n     \n  });\n\n\n  async function handleSubmit(values, setSubmitting) {\n    const { email, password } = values;\n\n    try {\n      const response = await fetch('http://localhost:9012/user/login', {\n        method: 'POST',\n        body: JSON.stringify({ email, password }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        dispatch(authenticateUser({ email, password }));\n        \n\n        navigate(\"/board\")\n      } else {\n        // if login failed\n        console.log('Login failed');\n        \n      }\n    } catch (error) {\n      console.log('Error:', error);\n    }\n    finally {\n       setSubmitting(false);\n    }\n  }\n\n\n\n  const { errors, touched, isSubmitting, handlesubmit, getFieldProps } = formik;\n\n  return (\n    <Stack spacing={5}>\n      <Box>\n            <Typography\n              variant=\"h3\"\n              sx={{\n                textAlign: \"center\",\n              }}\n            >\n              Trello Clone\n            </Typography>\n            <Typography\n              variant=\"h4\"\n              sx={{\n                textAlign: \"center\",\n              }}\n            >\n              Login Here\n            </Typography>\n          </Box>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handlesubmit}\n        onLogin={handleSubmit}>   \n          <Stack spacing={3}>\n            <TextField\n              fullWidth\n              autoComplete=\"username\"\n              type=\"email\"\n              label=\"Email address\"\n              {...getFieldProps(\"email\")}\n              error={Boolean(touched.email && errors.email)}\n              helperText={touched.email && errors.email}\n            />\n\n            <TextField\n              fullWidth\n              type=\"password\"\n              label=\"Password\"\n              {...getFieldProps(\"password\")}\n              error={Boolean(touched.password && errors.password)}\n              helperText={touched.password && errors.password}\n            />\n\n            <LoadingButton\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n              loading={isSubmitting}\n            >\n              Login\n            </LoadingButton>\n          </Stack>\n        </Form>\n      </FormikProvider>\n    </Stack>\n  );\n}\n*/","map":{"version":3,"names":[],"sources":["/Users/stellawu/Desktop/3130release3_main/group02/group02release2/trello-frontend/src/Components/Login.js"],"sourcesContent":["/*\nimport * as Yup from \"yup\";\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { Stack, TextField } from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { authenticateUser } from \"../store/slices/user/UserThunk\";\nimport { toast } from \"react-toastify\";\nimport storage from \"../lib/localStorage\";\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport axios from 'axios';\n\n\nexport default function Login(onLogin) {\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string()\n      .email(\"Email must be a valid email address\")\n      .required(\"Email is required\"),\n    password: Yup.string().required(\"Password is required\"),\n  });\n\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n \n  const formik = useFormik({\n    initialValues: {\n      email: null,\n      password: null,\n    },\n    validationSchema: LoginSchema,\n    onSubmit: async (values, {setSubmitting}) => {\n      const { email, password } = values;\n      onLogin(values,setSubmitting);\n      //console.log(email, password);\n      \n  /*    dispatch(\n        authenticateUser({\n          email,\n          password,\n        })\n      )\n        .then((response) => {\n          const { payload } = response;\n  \n          if (!payload || !payload[\"data\"]) {\n            toast.error(\"Something went wrong! Try again later\");\n            return;\n          }\n\n          const data = payload[\"data\"]\n          if (payload[\"status\"] !== \"SUCCESS\") {\n            toast.error(data[\"message\"]);\n            return;\n          }\n  \n          \n          storage.put(\"token\", data[\"token\"]);\n          navigate(\"/home\");\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n        \n    },\n     \n  });\n\n\n  async function handleSubmit(values, setSubmitting) {\n    const { email, password } = values;\n\n    try {\n      const response = await fetch('http://localhost:9012/user/login', {\n        method: 'POST',\n        body: JSON.stringify({ email, password }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        dispatch(authenticateUser({ email, password }));\n        \n\n        navigate(\"/board\")\n      } else {\n        // if login failed\n        console.log('Login failed');\n        \n      }\n    } catch (error) {\n      console.log('Error:', error);\n    }\n    finally {\n       setSubmitting(false);\n    }\n  }\n\n\n\n  const { errors, touched, isSubmitting, handlesubmit, getFieldProps } = formik;\n\n  return (\n    <Stack spacing={5}>\n      <Box>\n            <Typography\n              variant=\"h3\"\n              sx={{\n                textAlign: \"center\",\n              }}\n            >\n              Trello Clone\n            </Typography>\n            <Typography\n              variant=\"h4\"\n              sx={{\n                textAlign: \"center\",\n              }}\n            >\n              Login Here\n            </Typography>\n          </Box>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handlesubmit}\n        onLogin={handleSubmit}>   \n          <Stack spacing={3}>\n            <TextField\n              fullWidth\n              autoComplete=\"username\"\n              type=\"email\"\n              label=\"Email address\"\n              {...getFieldProps(\"email\")}\n              error={Boolean(touched.email && errors.email)}\n              helperText={touched.email && errors.email}\n            />\n\n            <TextField\n              fullWidth\n              type=\"password\"\n              label=\"Password\"\n              {...getFieldProps(\"password\")}\n              error={Boolean(touched.password && errors.password)}\n              helperText={touched.password && errors.password}\n            />\n\n            <LoadingButton\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n              loading={isSubmitting}\n            >\n              Login\n            </LoadingButton>\n          </Stack>\n        </Form>\n      </FormikProvider>\n    </Stack>\n  );\n}\n*/\n\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}